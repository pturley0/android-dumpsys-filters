#===============================================================================
# This bash script post-processes an Activity Manager "dump" to make it more
# readable:
#
#       adb shell dumpsys activity a | filter-tasks
#
#===============================================================================

#===============================================================================
# Constants.
#===============================================================================

declare -r CarriageReturn=$(printf '\r')

#===============================================================================
# Global variables.
#===============================================================================

LineBuffer=''

#===============================================================================

ThrowYourHandsInTheAir()
    {

    echo
    echo 'Error'
    echo
    echo $*
    echo

    exit 1

    }

#===============================================================================

GetTheNextLine()
    {

    #---------------------------------------------------------------------------
    # Loop until we get a non-blank line.
    #---------------------------------------------------------------------------

    while :
    do

        #-----------------------------------------------------------------------
        # Attempt to read the next line.
        #-----------------------------------------------------------------------

        if read -r
        then
            LineBuffer="${REPLY}"
        else
            exit 0
        fi

        #-----------------------------------------------------------------------
        # Strip carriage-returns at the end of the line.
        #-----------------------------------------------------------------------

        LineBuffer=$(echo "${LineBuffer}" | sed -e "s/${CarriageReturn}//")

        #-----------------------------------------------------------------------
        # If this line is blank, go back for another.
        #-----------------------------------------------------------------------

        if [[ "${LineBuffer}" == '' ]]
        then
            continue
        fi

        #-----------------------------------------------------------------------
        # This line is good.
        #-----------------------------------------------------------------------

        #echo ">|${LineBuffer}|<"

        return

    done

    }

#===============================================================================

Underscore()
    {

    #---------------------------------------------------------------------------
    # Get our argument.
    #---------------------------------------------------------------------------

    local Scratch="$1"

    #---------------------------------------------------------------------------
    # Get the length.
    #---------------------------------------------------------------------------

    local Length=${#Scratch}

    #---------------------------------------------------------------------------
    # Emit the argument.
    #---------------------------------------------------------------------------

    printf '%s\n' "${Scratch}"

    #---------------------------------------------------------------------------
    # Underscore it.
    #---------------------------------------------------------------------------

    local i=$((Length))

    while (( i > 0 ))
    do
        printf 'â”€'
        i=$((i - 1))
    done

    printf '\n'

    }

#===============================================================================

Parse()
    {

    #---------------------------------------------------------------------------
    # Prime the first line of input.
    #---------------------------------------------------------------------------

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Loop over nonsense until we find an activity stack.
    #---------------------------------------------------------------------------

    while ! ActivityStack
    do
        GetTheNextLine
    done

    #---------------------------------------------------------------------------
    # Loop over the remaining activity stacks.
    #---------------------------------------------------------------------------

    while ActivityStack
    do
        :
    done

    #---------------------------------------------------------------------------
    # Announce the beginning of global Activity Manager Service state.
    #---------------------------------------------------------------------------

    echo
    echo
    Underscore 'Activity Manager Service Metadata'
    echo

    #---------------------------------------------------------------------------
    # Next, we should see which activity has focus.
    #---------------------------------------------------------------------------

    FocusedActivity

    #---------------------------------------------------------------------------
    # Skip a line.
    #---------------------------------------------------------------------------

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Next, we should see which activity stack has focus.
    #---------------------------------------------------------------------------

    #echo
    FocusedActivityStack

    #---------------------------------------------------------------------------
    # Loop over nonsense until we find the recent tasks.
    #---------------------------------------------------------------------------

    echo

    while ! RecentTasks
    do
        GetTheNextLine
    done

    #---------------------------------------------------------------------------
    # Make some space at the end.
    #---------------------------------------------------------------------------

    echo

    }

#===============================================================================

ActivityStack()
    {

    #---------------------------------------------------------------------------
    # Check if we're looking at an activity stack.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"  Stack #" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # Extract the activity stack number.
    #---------------------------------------------------------------------------

    local ActivityStackNumber=$(echo "${LineBuffer}" | sed -e 's/^.*Stack #\([0-9][0-9]*\):.*$/\1/')

    #---------------------------------------------------------------------------
    # Announce the activity stack.
    #---------------------------------------------------------------------------

    echo
    echo
    Underscore "Activity Stack #${ActivityStackNumber}"

    #---------------------------------------------------------------------------
    # Consume this line.
    #---------------------------------------------------------------------------

    while ! Task
    do
        GetTheNextLine
    done

    #---------------------------------------------------------------------------
    # Loop over tasks within this activity stack.
    #---------------------------------------------------------------------------

    while Task
    do
        :
    done

    #---------------------------------------------------------------------------
    # Separate the last task from whatever activity stack metadata we may
    # display.
    #---------------------------------------------------------------------------

    echo

    #---------------------------------------------------------------------------
    # Continue consuming lines until we encounter one that can't belong to this
    # activity stack.
    #---------------------------------------------------------------------------

    while [[ "${LineBuffer}" =~ ^"    " ]]
    do

        #-----------------------------------------------------------------------
        # This line belongs to this activity stack. Try to understand it.
        #-----------------------------------------------------------------------

        if ResumedActivity
        then
            continue
        fi

        if LastPausedActivity
        then
            continue
        fi

        #-----------------------------------------------------------------------
        # If control arrives here, this line doesn't make sense to us. Eat it
        # and go on to the next one.
        #-----------------------------------------------------------------------

        GetTheNextLine

    done

    #---------------------------------------------------------------------------
    # Return success.
    #---------------------------------------------------------------------------

    return 0

    }

#===============================================================================

Task()
    {

    #---------------------------------------------------------------------------
    # Check if this is beginning of a task.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"    Task id #" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # Consume this line.
    #---------------------------------------------------------------------------

    while ! ExtractTaskRecord
    do
        GetTheNextLine
    done

    #---------------------------------------------------------------------------
    # This line should contain a task record.
    #---------------------------------------------------------------------------

    local Record=''

    if ! Record=$(ExtractTaskRecord)
    then
        ThrowYourHandsInTheAir Malformed task record
    fi

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Find out if this task is on top of home.
    #---------------------------------------------------------------------------

    local OnTopOfHome=''

    if [[ "${LineBuffer}" =~ "mOnTopOfHome=true" ]]
    then
        OnTopOfHome=' (On Home)'
    fi

    #---------------------------------------------------------------------------
    # Announce this task.
    #---------------------------------------------------------------------------

    echo
    echo "    Task ${Record}${OnTopOfHome}"

    #---------------------------------------------------------------------------
    # Separate the task record from the list of activities.
    #---------------------------------------------------------------------------

    echo '    â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€'

    #---------------------------------------------------------------------------
    # Consume the remaining task-specific lines.
    #---------------------------------------------------------------------------

    while [[ "${LineBuffer}" =~ ^"      "[a-zA-Z] ]]
    do
        GetTheNextLine
    done

    #---------------------------------------------------------------------------
    # Loop over activities history entries within this task.
    #---------------------------------------------------------------------------

    while Activity
    do
        :
    done

    #---------------------------------------------------------------------------
    # Continue consuming lines until we encounter one that can't belong to this
    # activity stack.
    #---------------------------------------------------------------------------

    while [[ "${LineBuffer}" =~ ^"      " ]]
    do
        GetTheNextLine
    done

    #---------------------------------------------------------------------------
    # Finish out this task.
    #---------------------------------------------------------------------------

    echo '      â””â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€'

    #---------------------------------------------------------------------------
    # Return success.
    #---------------------------------------------------------------------------

    return 0

    }

#===============================================================================

Activity()
    {

    #---------------------------------------------------------------------------
    # Check if this is beginning of an activity.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"      * Hist #" ]]
    then

        #-----------------------------------------------------------------------
        # If control arrives here, this is *not* an activity.
        #-----------------------------------------------------------------------

        return 1

    fi

    #---------------------------------------------------------------------------
    # This line should contain an activity record.
    #---------------------------------------------------------------------------

    local Record=''

    if ! Record=$(ExtractActivityRecord)
    then
        ThrowYourHandsInTheAir Malformed activity record
    fi

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Announce this activity.
    #---------------------------------------------------------------------------

    echo "      â”‚ ${Record}"

    #---------------------------------------------------------------------------
    # Consume this line.
    #---------------------------------------------------------------------------

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Eat the rest of this activity.
    #---------------------------------------------------------------------------

    while [[ "${LineBuffer}" =~ ^"          " ]]
    do
        GetTheNextLine
    done

    }

#===============================================================================

ResumedActivity()
    {

    #---------------------------------------------------------------------------
    # Check if this shows the resumed activity in an activity stack.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"    mResumedActivity: " ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # This line should contain an activity record.
    #---------------------------------------------------------------------------

    local Record=''

    if ! Record=$(ExtractActivityRecord)
    then
        ThrowYourHandsInTheAir Malformed activity record
    fi

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Announce this activity.
    #---------------------------------------------------------------------------

    echo "    Resumed Activity: ${Record}"

    }

#===============================================================================

LastPausedActivity()
    {

    #---------------------------------------------------------------------------
    # Check if this shows the last paused activity in an activity stack.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"    mLastPausedActivity: " ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # This line should contain an activity record.
    #---------------------------------------------------------------------------

    local Record=''

    if ! Record=$(ExtractActivityRecord)
    then
        ThrowYourHandsInTheAir Malformed activity record
    fi

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Announce this activity.
    #---------------------------------------------------------------------------

    echo "    Last Paused Activity: ${Record}"

    }

#===============================================================================

FocusedActivity()
    {

    #---------------------------------------------------------------------------
    # Check if this shows the activity that has focus.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"  mFocusedActivity:" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # This line should contain an activity record.
    #---------------------------------------------------------------------------

    local Record=''

    if ! Record=$(ExtractActivityRecord)
    then
        ThrowYourHandsInTheAir Malformed activity record
    fi

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Announce this activity.
    #---------------------------------------------------------------------------

    echo "  Focused Activity: ${Record}"

    }

#===============================================================================

FocusedActivityStack()
    {

    #---------------------------------------------------------------------------
    # Check if this shows the activity stack that has focus.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"  mFocusedStack=" ]]
    then
        return 1
    fi

    local mFocusedStack=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*\(mFocusedStack=ActivityStack{[^{}]*}\).*$/\1/'
        ) 

    #---------------------------------------------------------------------------
    # Extract information about this activity stack.
    #---------------------------------------------------------------------------

    local HashCode=$(
        echo "${mFocusedStack}" |
        sed -e 's/^.*ActivityStack[^ ]\([^ ][^ ]*\) .*$/\1/'
        )

    local StackID=$(
        echo "${mFocusedStack}" |
        sed -e 's/^.*ActivityStack[^ ][^ ]* stackId=\([^ ][^ ,]*\)[, ].*$/\1/'
        )

    #---------------------------------------------------------------------------
    # Announce this activity.
    #---------------------------------------------------------------------------

    echo "  Activity Stack with Focus: #${StackID} (${HashCode})"
    local mLastFocusedStack=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*\(mLastFocusedStack=ActivityStack{[^{}]*}\).*$/\1/'
        ) 

    #---------------------------------------------------------------------------
    # Extract information about this activity stack.
    #---------------------------------------------------------------------------

    local HashCode=$(
        echo "${mLastFocusedStack}" |
        sed -e 's/^.*ActivityStack[^ ]\([^ ][^ ]*\) .*$/\1/'
        )

    local StackID=$(
        echo "${mLastFocusedStack}" |
        sed -e 's/^.*ActivityStack[^ ][^ ]* stackId=\([^ ][^ ,]*\)[, ].*$/\1/'
        )

    #---------------------------------------------------------------------------
    # Announce this activity.
    #---------------------------------------------------------------------------

    echo "  Last Activity Stack with Focus: #${StackID} (${HashCode})"

    #---------------------------------------------------------------------------
    # Consume this line.
    #---------------------------------------------------------------------------

    GetTheNextLine

    }

#===============================================================================

RecentTasks()
    {

    #---------------------------------------------------------------------------
    # Check if this is the recent tasks.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"  Recent tasks:" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # Consume this line.
    #---------------------------------------------------------------------------

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Announce the list of recent tasks.
    #---------------------------------------------------------------------------

    echo '  Recent Tasks'
    echo '  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€'

    #---------------------------------------------------------------------------
    # Loop over recent tasks.
    #---------------------------------------------------------------------------

    while RecentTask
    do
        :
    done

    }

#===============================================================================

RecentTask()
    {

    #---------------------------------------------------------------------------
    # Check if this shows a recent task.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^"  * Recent #" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # Extract information about this task.
    #---------------------------------------------------------------------------

    local Index=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*Recent #\([0-9][0-9]*\): .*$/\1/'
        )

    #---------------------------------------------------------------------------
    # This line should contain a task record.
    #---------------------------------------------------------------------------

    local Record=''

    if ! Record=$(ExtractTaskRecord)
    then
        ThrowYourHandsInTheAir Malformed task record
    fi

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Announce this task.
    #---------------------------------------------------------------------------

    echo "    [${Index}] ${Record}"

    #---------------------------------------------------------------------------
    # Consume this line.
    #---------------------------------------------------------------------------

    GetTheNextLine

    #---------------------------------------------------------------------------
    # Consume the remaining lines in this recent task.
    #---------------------------------------------------------------------------

    while [[ "${LineBuffer}" =~ ^"    " ]]
    do
        GetTheNextLine
    done

    }

#===============================================================================

ExtractTaskRecord()
    {

    #---------------------------------------------------------------------------
    # Check if the current line appears to contain a task record.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^.*"TaskRecord{" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # Extract information.
    #---------------------------------------------------------------------------

    local HashCode=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*TaskRecord[^ ]\([^ ][^ ]*\) .*$/\1/'
        )

    local TaskNumber=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*TaskRecord[^ ][^ ]* #\([^ ][^ ]*\) .*$/\1/'
        )

    local Affinity=''

    if [[ "${LineBuffer}" =~ ^.*"TaskRecord{".*" A=" ]]
    then
        local Affinity=$(echo "${LineBuffer}" | sed -e 's/^.*A=\([^ ][^ ]*\).*$/\1/')
    fi

    local Intent=''

    if [[ "${LineBuffer}" =~ ^.*"TaskRecord{".*" I=" ]]
    then
        local Intent=$(echo "${LineBuffer}" | sed -e 's/^.*I=\([^ ][^ ]*\).*$/\1/')
    fi

    local AffinityIntent=''

    if [[ "${LineBuffer}" =~ ^.*"TaskRecord{".*" aI=" ]]
    then
        local AffinityIntent=$(echo "${LineBuffer}" | sed -e 's/^.*I=\([^ ][^ ]*\).*$/\1/')
    fi

    #---------------------------------------------------------------------------
    # Describe this task record.
    #---------------------------------------------------------------------------

    if [[ -n "${Affinity}" ]]
    then
        echo "#${TaskNumber} (${HashCode}) Affinity=${Affinity}"
    elif [[ -n "${Intent}" ]]
    then
        echo "#${TaskNumber} (${HashCode}) Intent=${Intent}"
    elif [[ -n "${AffinityIntent}" ]]
    then
        echo "#${TaskNumber} (${HashCode}) AffinityIntent=${AffinityIntent}"
    fi

    #---------------------------------------------------------------------------
    # Return success.
    #---------------------------------------------------------------------------

    return 0

    }

#===============================================================================

ExtractActivityRecord()
    {

    #---------------------------------------------------------------------------
    # Check if the current line appears to contain an activity record.
    #---------------------------------------------------------------------------

    if ! [[ "${LineBuffer}" =~ ^.*"ActivityRecord{" ]]
    then
        return 1
    fi

    #---------------------------------------------------------------------------
    # Extract information about this activity.
    #---------------------------------------------------------------------------

    local HashCode=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*ActivityRecord{\([^ ][^ ]*\) .*$/\1/'
        )

    local ComponentName=$(
        echo "${LineBuffer}" |
        sed -e 's/^.*ActivityRecord{[^ ]* [^ ][^ ]* \([^ ][^ ]*\) .*$/\1/'
        )

    #---------------------------------------------------------------------------
    # Describe this activity.
    #---------------------------------------------------------------------------

    echo "(${HashCode}) ${ComponentName}"

    #---------------------------------------------------------------------------
    # Return success.
    #---------------------------------------------------------------------------

    return 0

    }

#===============================================================================

#-------------------------------------------------------------------------------
# Parse the input.
#-------------------------------------------------------------------------------

Parse
